{"ast":null,"code":"// // const XLSX = require('xlsx');\n\n// // function readExcelFile(filePath) {\n// //     const workbook = XLSX.readFile(filePath);\n// //     const sheetName = workbook.SheetNames[0]; // Assumes the data is in the first sheet\n// //     const worksheet = workbook.Sheets[sheetName];\n// //     return XLSX.utils.sheet_to_json(worksheet);\n// // }\n\n// // function filterItems(items, date, time) {\n// //     return items.filter(item => \n// //         item['Date'] && item['Date'].toString().includes(date) &&\n// //         item['Time'] && item['Time'].toString().includes(time)\n// //     );\n// // }\n\n// // const filePath = './master file-mid sem.xlsx';\n// // const items = readExcelFile(filePath);\n// // //////////////////////////////////////////////////////////////////////\n// // const dateToFilter = '12/10/23, Thursday'; // Replace with your desired date\n// // const timeToFilter = '9:00 AM - 10:30 AM'; // Replace with your desired time\n// // //////////////////////////////////////////////////////////////////////\n// // const filteredItems = filterItems(items, dateToFilter, timeToFilter);\n// // console.log(filteredItems);\n// const XLSX = require('xlsx');\n\n// function readExcelFile(filePath) {\n//     const workbook = XLSX.readFile(filePath);\n//     const sheetName = workbook.SheetNames[0]; // Assumes the data is in the first sheet\n//     const worksheet = workbook.Sheets[sheetName];\n//     return XLSX.utils.sheet_to_json(worksheet);\n// }\n\n// function filterItemsByDateAndTime(items, date, time) {\n//     return items.filter(item => \n//         item['Date'] && item['Date'].toString().includes(date) &&\n//         item['Time'] && item['Time'].toString().includes(time)\n//     );\n// }\n\n// function countEntriesByCourseNo(items) {\n//     const count = {};\n//     items.forEach(item => {\n//         if (item['Course No']) {\n//             count[item['Course No']] = (count[item['Course No']] || 0) + 1;\n//         }\n//     });\n//     return count;\n// }\n\n// // Example usage:\n// const filePath = './master file-mid sem.xlsx'; // Replace with your actual file path\n// const items = readExcelFile(filePath);\n\n// // Filter items by specific Date and Time\n// const dateToFilter = '08/10/23, Sunday'; // Replace with your desired date\n// const timeToFilter = '11:30 AM - 01:00 PM'; // Replace with your desired time\n// const filteredItems = filterItemsByDateAndTime(items, dateToFilter, timeToFilter);\n\n// // Count entries by Course No\n// let entriesCount = countEntriesByCourseNo(filteredItems);\n// // console.log(entriesCount);\n// module.exports.targetStudentArray = entriesCount;\nconst XLSX = require('xlsx');\nfunction readExcelFile(filePath) {\n  const workbook = XLSX.readFile(filePath);\n  const sheetName = workbook.SheetNames[0]; // Assumes the data is in the first sheet\n  const worksheet = workbook.Sheets[sheetName];\n  return XLSX.utils.sheet_to_json(worksheet);\n}\nfunction filterItemsByDateAndTime(items, date, time) {\n  return items.filter(item => item['Date'] && item['Date'].toString().includes(date) && item['Time'] && item['Time'].toString().includes(time));\n}\nfunction countEntriesByCourseNo(items) {\n  const count = {};\n  items.forEach(item => {\n    if (item['Course No']) {\n      count[item['Course No']] = (count[item['Course No']] || 0) + 1;\n    }\n  });\n  return count;\n}\nfunction extractUniqueDates(items) {\n  const dates = new Set();\n  items.forEach(item => {\n    if (item['Date']) {\n      dates.add(item['Date'].toString());\n    }\n  });\n  return Array.from(dates);\n}\nfunction extractUniqueTimes(items) {\n  const times = new Set();\n  items.forEach(item => {\n    if (item['Time']) {\n      times.add(item['Time'].toString());\n    }\n  });\n  return Array.from(times);\n}\n\n// Example usage:\nconst filePath = \"./master file-mid sem.xlsx\"; // Replace with your actual file path\nconst items = readExcelFile(filePath);\n\n// Extract unique dates and times\nconst uniqueDates = extractUniqueDates(items);\nconst uniqueTimes = extractUniqueTimes(items);\nconsole.log(\"Unique Dates:\", uniqueDates);\nconsole.log(\"Unique Times:\", uniqueTimes);\n\n// Filter items by specific Date and Time\nconst dateToFilter = '09/10/23, Monday'; // Replace with your desired date\nconst timeToFilter = '11:00 AM - 12:30 PM'; // Replace with your desired time\nconst filteredItems = filterItemsByDateAndTime(items, dateToFilter, timeToFilter);\n\n// Count entries by Course No\n// const entriesCount = countEntriesByCourseNo(filteredItems);\nlet entriesCount = countEntriesByCourseNo(filteredItems);\nconsole.log(entriesCount);\nmodule.exports.targetStudentArray = entriesCount;\nexport const data = {\n  uniqueDates\n};\n// module.exports = {uniqueDates};\nmodule.exports.Alltimes = uniqueTimes;","map":{"version":3,"names":["XLSX","require","readExcelFile","filePath","workbook","readFile","sheetName","SheetNames","worksheet","Sheets","utils","sheet_to_json","filterItemsByDateAndTime","items","date","time","filter","item","toString","includes","countEntriesByCourseNo","count","forEach","extractUniqueDates","dates","Set","add","Array","from","extractUniqueTimes","times","uniqueDates","uniqueTimes","console","log","dateToFilter","timeToFilter","filteredItems","entriesCount","module","exports","targetStudentArray","data","Alltimes"],"sources":["/Users/prasoonbagla/Desktop/DOP/seating/src/Backend/excel.js"],"sourcesContent":["// // const XLSX = require('xlsx');\n\n// // function readExcelFile(filePath) {\n// //     const workbook = XLSX.readFile(filePath);\n// //     const sheetName = workbook.SheetNames[0]; // Assumes the data is in the first sheet\n// //     const worksheet = workbook.Sheets[sheetName];\n// //     return XLSX.utils.sheet_to_json(worksheet);\n// // }\n\n// // function filterItems(items, date, time) {\n// //     return items.filter(item => \n// //         item['Date'] && item['Date'].toString().includes(date) &&\n// //         item['Time'] && item['Time'].toString().includes(time)\n// //     );\n// // }\n\n// // const filePath = './master file-mid sem.xlsx';\n// // const items = readExcelFile(filePath);\n// // //////////////////////////////////////////////////////////////////////\n// // const dateToFilter = '12/10/23, Thursday'; // Replace with your desired date\n// // const timeToFilter = '9:00 AM - 10:30 AM'; // Replace with your desired time\n// // //////////////////////////////////////////////////////////////////////\n// // const filteredItems = filterItems(items, dateToFilter, timeToFilter);\n// // console.log(filteredItems);\n// const XLSX = require('xlsx');\n\n// function readExcelFile(filePath) {\n//     const workbook = XLSX.readFile(filePath);\n//     const sheetName = workbook.SheetNames[0]; // Assumes the data is in the first sheet\n//     const worksheet = workbook.Sheets[sheetName];\n//     return XLSX.utils.sheet_to_json(worksheet);\n// }\n\n// function filterItemsByDateAndTime(items, date, time) {\n//     return items.filter(item => \n//         item['Date'] && item['Date'].toString().includes(date) &&\n//         item['Time'] && item['Time'].toString().includes(time)\n//     );\n// }\n\n// function countEntriesByCourseNo(items) {\n//     const count = {};\n//     items.forEach(item => {\n//         if (item['Course No']) {\n//             count[item['Course No']] = (count[item['Course No']] || 0) + 1;\n//         }\n//     });\n//     return count;\n// }\n\n// // Example usage:\n// const filePath = './master file-mid sem.xlsx'; // Replace with your actual file path\n// const items = readExcelFile(filePath);\n\n// // Filter items by specific Date and Time\n// const dateToFilter = '08/10/23, Sunday'; // Replace with your desired date\n// const timeToFilter = '11:30 AM - 01:00 PM'; // Replace with your desired time\n// const filteredItems = filterItemsByDateAndTime(items, dateToFilter, timeToFilter);\n\n// // Count entries by Course No\n// let entriesCount = countEntriesByCourseNo(filteredItems);\n// // console.log(entriesCount);\n// module.exports.targetStudentArray = entriesCount;\nconst XLSX = require('xlsx');\n\nfunction readExcelFile(filePath) {\n    const workbook = XLSX.readFile(filePath);\n    const sheetName = workbook.SheetNames[0]; // Assumes the data is in the first sheet\n    const worksheet = workbook.Sheets[sheetName];\n    return XLSX.utils.sheet_to_json(worksheet);\n}\n\nfunction filterItemsByDateAndTime(items, date, time) {\n    return items.filter(item => \n        item['Date'] && item['Date'].toString().includes(date) &&\n        item['Time'] && item['Time'].toString().includes(time)\n    );\n}\n\nfunction countEntriesByCourseNo(items) {\n    const count = {};\n    items.forEach(item => {\n        if (item['Course No']) {\n            count[item['Course No']] = (count[item['Course No']] || 0) + 1;\n        }\n    });\n    return count;\n}\n\nfunction extractUniqueDates(items) {\n    const dates = new Set();\n    items.forEach(item => {\n        if (item['Date']) {\n            dates.add(item['Date'].toString());\n        }\n    });\n    return Array.from(dates);\n}\n\nfunction extractUniqueTimes(items) {\n    const times = new Set();\n    items.forEach(item => {\n        if (item['Time']) {\n            times.add(item['Time'].toString());\n        }\n    });\n    return Array.from(times);\n}\n\n// Example usage:\nconst filePath = \"./master file-mid sem.xlsx\"; // Replace with your actual file path\nconst items = readExcelFile(filePath);\n\n// Extract unique dates and times\nconst uniqueDates = extractUniqueDates(items);\nconst uniqueTimes = extractUniqueTimes(items);\n\nconsole.log(\"Unique Dates:\", uniqueDates);\nconsole.log(\"Unique Times:\", uniqueTimes);\n\n// Filter items by specific Date and Time\nconst dateToFilter = '09/10/23, Monday'; // Replace with your desired date\nconst timeToFilter = '11:00 AM - 12:30 PM'; // Replace with your desired time\nconst filteredItems = filterItemsByDateAndTime(items, dateToFilter, timeToFilter);\n\n// Count entries by Course No\n// const entriesCount = countEntriesByCourseNo(filteredItems);\nlet entriesCount = countEntriesByCourseNo(filteredItems);\nconsole.log(entriesCount);\nmodule.exports.targetStudentArray = entriesCount;\nexport const data = {uniqueDates};\n// module.exports = {uniqueDates};\nmodule.exports.Alltimes = uniqueTimes;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}